#!/usr/bin/env python3


import argparse
import os
import shutil
import subprocess


def get_args() -> argparse.Namespace:
    """
    Return arguments from the command line
    """
    parser = argparse.ArgumentParser("deploy")
    parser.add_argument("service")

    return parser.parse_args()


def prep_service(service: str):
    """
    Check if the service exists and prepares it for deployment
    """

    if not os.path.isdir(service) or service in ["docs", "shared", "tools"]:
        raise ValueError("Service '{}' does not exist".format(service))

    # Copy files to build directory
    build_dir = os.path.join(service, "build")

    # Copy folders
    for name in ["src", "resources", "tests"]:
        if not os.path.isdir(os.path.join(service, name)):
            continue
        shutil.copytree(os.path.join(service, name), os.path.join(build_dir, name))

    # Copy files
    for name in ["template.yaml"]:
        if not os.path.isfile(os.path.join(service, name)):
            continue
        shutil.copy2(os.path.join(service, name), os.path.join(build_dir, name))

    # Parse OpenAPI specifications and copy in the build folder, if any
    copy_openapi(service, build_dir)

    # Package CloudFormation template
    package_template(service, build_dir)

def copy_openapi(service: str, build_dir: str):
    """
    Parse OpenAPI specs and returns a merged document
    """

    openapi_file = os.path.join(service, "resources", "openapi.yaml")
    openapi_out_file = os.path.join(build_dir, "resources", "openapi.yaml")

    # Skip if there are no OpenAPI specifications for that service
    if not os.path.isfile(openapi_file):
        return

    subprocess.run(["speccy", "resolve", openapi_file, "-o", openapi_out_file])

def package_template(service: str, build_dir: str):
    """
    Package the CloudFormation template
    """

    s3_bucket = os.environ.get("S3_BUCKET", "{}-src".format(os.environ["USER"]))

    workdir = os.getcwd()
    os.chdir(build_dir)
    subprocess.run(["aws", "cloudformation", "package", "--s3-bucket", s3_bucket,
        "--template-file", "template.yaml",
        "--output-template-file", "template.out"])

    os.chdir(workdir)


if __name__ == "__main__":
    args = get_args()

    # Prepare service
    prep_service(args.service)