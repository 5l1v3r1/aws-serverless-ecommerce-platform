openapi: "3.0.2"
info:
  title: Orders API
  version: 1.0.0
  description: Orders service API definition
  license:
    name: MIT-0
    url: https://github.com/aws/mit-0

paths:
  /:
    get:
      description: |
        Retrieve orders belonging to the user.
      operationId: getOrders
      parameters:
        - in: query
          name: nextToken
          description: Continuation token
          schema:
            type: string
      responses:
        200:
          description: Array of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: "../../shared/resources/schemas.yaml#/Order"
                  nextToken:
                    type: string
        default:
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: "../../shared/resources/schemas.yaml#/Message"
      security:
        - UserPool: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: aws_proxy
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrdersFunction.Arn}/invocations"
  #   post:
  #     description: |
  #       Create a new order.

  #       This will try to create a new order or return a 4XX error message
  #       containing the correct information.

  #       This operation is a control point to transform unvalidated customer input
  #       into an order that can be trusted by other services.
  #     operationId: createOrder
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/OrderRequest"
  #     responses:
  #       200:
  #         description: Newly created order
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "../../shared/resources/schemas.yaml#/Order"
  #       4XX:
  #         description: User error
  #         content:
  #           application/json:
  #             schema:
  #               allOf:
  #                 - $ref: "../../shared/resources/schemas.yaml#/Message"
  #                 - $ref: "#/components/schemas/OrderRequest"
  #       default:
  #         description: Something went wrong
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "../../shared/resources/schemas.yaml#/Message"
  #     security:
  #       - UserPool: []
  #     x-amazon-apigateway-integration:
  #       httpMethod: "POST"
  #       type: aws_proxy
  #       uri:
  #         Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateOrderFunction.Arn}/invocations"

  /{orderId}:
    get:
      description: |
        Retrieve a single order belonging to the user.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: Order ID in UUID format
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Order item
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: "../../shared/resources/schemas.yaml#/Order"
        default:
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: "../../shared/resources/schemas.yaml#/Message"
      security:
        - UserPool: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: aws_proxy
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderFunction.Arn}/invocations"

  /backend/{orderId}:
    get:
      description: |
        Retrieve a single order.

        This is a backend operation that requires IAM credentials.
      operationId: backendGetOrder
      parameters:
        - name: orderId
          in: path
          description: Order ID in UUID format
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Order item
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: "../../shared/resources/schemas.yaml#/Order"
        default:
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: "../../shared/resources/schemas.yaml#/Message"
      security:
        - AWS_IAM: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        type: aws_proxy
        uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetOrderFunction.Arn}/invocations"


components:
  schemas:
    OrderRequest:
      type: object
      description: Information necessary for creating an order.
      properties:
        products:
          type: array
          items:
            $ref: "../../shared/resources/schemas.yaml#/Product"
        address:
          $ref: "../../shared/resources/schemas.yaml#/Address"
        deliveryPrice:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
  securitySchemes:
    AWS_IAM:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
    UserPool:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: cognito_user_pools
        providerARNs:
          - Ref: UserPoolArn
