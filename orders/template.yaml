AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name
    Default: /ecommerce/dev/platform/event-bus/name
  UserPoolArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Cognito User Pool ARN
    Default: /ecommerce/dev/users/user-pool/arn


Globals:
  Function:
    Runtime: python3.8
    Handler: main.handler
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        TABLE_NAME: !Ref Table
        POWERTOOLS_SERVICE_NAME: orders
        POWERTOOLS_TRACE_DISABLED: "false"
        LOG_LEVEL: !Ref LogLevel

Resources:
  #########
  # TABLE #
  #########
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdDate
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  TableParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/orders/table/name
      Type: String
      Value: !Ref Table

  #############
  # FUNCTIONS #
  #############

  GetOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_orders/
      Environment:
        Variables:
          USER_INDEX_NAME: user
          ORDERS_LIMIT: "20"
      Events:
        UserApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource:
                - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}/index/user"

  GetOrdersLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetOrdersFunction}"
      RetentionInDays: !Ref RetentionInDays

  # GetOrderFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: #TODO
  #     Events:
  #       UserApi:
  #         Type: Api
  #         Properties:
  #           Path: /{orderId}
  #           Method: GET
  #           RestApiId: !Ref Api
  #       BackendApi:
  #         Type: Api
  #         Properties:
  #           Path: /backend/{orderId}
  #           Method: GET
  #           RestApiId: !Ref Api

  # GetOrderLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub "/aws/lambda/${GetOrderFunction}"
  #     RetentionInDays: !Ref RetentionInDays

  # PostOrderFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: #TODO
  #     Events:
  #       UserApi:
  #         Type: Api
  #         Properties:
  #           Path: /
  #           Method: POST
  #           RestApiId: !Ref Api

  # PostOrderLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub "/aws/lambda/${PostOrderFunction}"
  #     RetentionInDays: !Ref RetentionInDays

  ###############
  # API GATEWAY #
  ###############

  Api:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        Fn::Transform:
          Name: "AWS::Include"
          Parameters:
            Location: "resources/openapi.yaml"
      EndpointConfiguration: REGIONAL
      StageName: prod
      TracingEnabled: true

  ApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/orders/api/url
      Type: String
      Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"
