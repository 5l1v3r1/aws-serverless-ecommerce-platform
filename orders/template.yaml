AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention period for Lambda functions
  DeliveryApiUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Delivery API Gateway URL
  DeliveryApiArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Delivery API Gateway ARN
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name
  ProductsApiUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Products API Gateway URL
  ProductsApiArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Products API Gateway ARN


Globals:
  Function:
    Runtime: python3.8
    Handler: main.handler
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        TABLE_NAME: !Ref Table
        POWERTOOLS_SERVICE_NAME: orders
        POWERTOOLS_TRACE_DISABLED: "false"
        LOG_LEVEL: !Ref LogLevel


Conditions:
  IsNotProd: !Not [!Equals [!Ref Environment, prod]]


Resources:
  #########
  # TABLE #
  #########
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: createdDate
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  TableParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/orders/table/name
      Type: String
      Value: !Ref Table

  #############
  # FUNCTIONS #
  #############
  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create_order/
      Environment:
        Variables:
          DELIVERY_API_URL: !Ref DeliveryApiUrl
          PRODUCTS_API_URL: !Ref ProductsApiUrl
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt Table.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: execute-api:Invoke
              # Retrieve the order details
              Resource:
                - !Sub "${DeliveryApiArn}/POST/*"
                - !Sub "${ProductsApiArn}/POST/*"
  
  CreateOrderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateOrderFunction}"
      RetentionInDays: !Ref RetentionInDays

  CreateOrderArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/orders/create-order/arn
      Type: String
      Value: !GetAtt CreateOrderFunction.Arn

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_order/
      Events:
        BackendApi:
          Type: Api
          Properties:
            Path: /backend/{orderId}
            Method: GET
            RestApiId: !Ref Api
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource:
                - !GetAtt Table.Arn

  GetOrderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetOrderFunction}"
      RetentionInDays: !Ref RetentionInDays

  TableUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.handler
      CodeUri: src/table_update/
      Events:
        DynamoDB:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt Table.StreamArn
            StartingPosition: TRIM_HORIZON
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt DeadLetterQueue.Outputs.QueueArn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt DeadLetterQueue.Outputs.QueueArn

  TableUpdateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TableUpdateFunction}"
      RetentionInDays: !Ref RetentionInDays

  OnEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/on_events/
      Events:
        DeliveryEvents:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source: [ecommerce.delivery]
              detail-type:
                - DeliveryCompleted
                - DeliveryFailed
        WarehouseEvents:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref EventBusName
            Pattern:
              source: [ecommerce.warehouse]
              detail-type:
                - PackageCreated
                - PackagingFailed
      EventInvokeConfig:
        # Put failed events on a DLQ
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt DeadLetterQueue.Outputs.QueueArn
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt Table.Arn
              Condition:
                # Scope down to only allow fetching/changing the status and products
                ForAllValues:StringEquals:
                  dynamodb:Attributes:
                    - orderId
                    - products
                    - status

  OnEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OnEventsFunction}"
      RetentionInDays: !Ref RetentionInDays

  ###############
  # API GATEWAY #
  ###############
  Api:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        Fn::Transform:
          Name: "AWS::Include"
          Parameters:
            Location: "resources/openapi.yaml"
      EndpointConfiguration: REGIONAL
      StageName: prod
      TracingEnabled: true

  ApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/orders/api/url
      Type: String
      Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod"

  ApiArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/orders/api/arn
      Type: String
      Value: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/prod"

  #####################
  # DEAD LETTER QUEUE #
  #####################
  DeadLetterQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../shared/templates/dlq.yaml
      
  ############
  # LISTENER #
  ############
  Listener:
    Type: AWS::CloudFormation::Stack
    Condition: IsNotProd
    Properties:
      TemplateURL: ../../shared/templates/listener.yaml
      Parameters:
        Environment: !Ref Environment
        EventBusName: !Ref EventBusName
        ServiceName: "orders"