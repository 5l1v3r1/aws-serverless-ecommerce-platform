AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  DeliveryTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Delivery Table Name
  OrdersCreateOrderArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Create Order Lambda Function ARN
  OrdersTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Orders Table Name
  ProductsTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Products Table Name
  WarehouseTableName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Warehouse Table Name
  UserPoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Cognito User Pool ID


Resources:
  ###############
  # GRAPHQL API #
  ###############
  Api:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "ecommerce-${Environment}-frontend-api"
      AuthenticationType: API_KEY
      AdditionalAuthenticationProviders:
        - AuthenticationType: AMAZON_COGNITO_USER_POOLS
          UserPoolConfig:
            # AppIdClientRegex: !Sub "ecommerce-${Environment}-frontend-api.*"
            AwsRegion: !Ref AWS::Region
            UserPoolId: !Ref UserPoolId
      XrayEnabled: true

  ApiArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/frontend-api/api/arn
      Type: String
      Value: !GetAtt Api.Arn

  ApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/frontend-api/api/id
      Type: String
      Value: !GetAtt Api.ApiId

  ApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /ecommerce/${Environment}/frontend-api/api/url
      Type: String
      Value: !GetAtt Api.GraphQLUrl

  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DefinitionS3Location: "resources/api.graphql"

  ############
  # DELIVERY #
  ############
  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeliveryTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DeliveryTableName}"

  DeliveryDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: DeliveryTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt DeliveryRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref DeliveryTableName

  GetNewDeliveriesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt DeliveryDataSource.Name
      FieldName: getNewDeliveries
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if( $ctx.args.nextToken )
            "nextToken": "$ctx.args.nextToken",
          #end
          "limit": ${QueryLimit},
          "index": "orderId-new"
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken",
          #end
          "deliveries": [
            #foreach($item in $ctx.result.items)
              {
                "orderId": $utils.toJson($item.orderId),
                "address": $utils.toJson($item.address),
              },
            #end
          ]
        }

  GetDeliveryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt DeliveryDataSource.Name
      FieldName: getDelivery
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  StartDeliveryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt DeliveryDataSource.Name
      FieldName: startDelivery
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId)
          },
          "update": {
            "expression": "SET #status = :status REMOVE #isNew",
            "expressionNames": {
              "#status": "status",
              "#isNew": "isNew"
            },
            "expressionValues": {
              ":status": {"S": "IN_PROGRESS"}
            }
          },
          "condition": {
            "expression": "#oldStatus = :oldStatus",
            "expressionNames": {
              "#oldStatus": "status"
            },
            "expressionValues": {
              ":oldStatus": {"S": "NEW"}
            },
            "conditionalCheckFailedHandler": {
              "strategy": "Reject"
            }
          }
        }
      ResponseMappingTemplate: |
        {
          "success": true
        }

  FailDeliveryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt DeliveryDataSource.Name
      FieldName: failDelivery
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId)
          },
          "update": {
            "expression": "SET #status = :status",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": {"S": "FAILED"}
            }
          },
          "condition": {
            "expression": "#oldStatus = :oldStatus",
            "expressionNames": {
              "#oldStatus": "status"
            },
            "expressionValues": {
              ":oldStatus": {"S": "IN_PROGRESS"}
            },
            "conditionalCheckFailedHandler": {
              "strategy": "Reject"
            }
          }
        }
      ResponseMappingTemplate: |
        {
          "success": true
        }

  CompleteDeliveryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt DeliveryDataSource.Name
      FieldName: completeDelivery
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId)
          },
          "update": {
            "expression": "SET #status = :status",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": {"S": "COMPLETED"}
            }
          },
          "condition": {
            "expression": "#oldStatus = :oldStatus",
            "expressionNames": {
              "#oldStatus": "status"
            },
            "expressionValues": {
              ":oldStatus": {"S": "IN_PROGRESS"}
            },
            "conditionalCheckFailedHandler": {
              "strategy": "Reject"
            }
          }
        }
      ResponseMappingTemplate: |
        {
          "success": true
        }

  ##########
  # ORDERS #
  ##########
  OrdersRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OrdersTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OrdersTableName}"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${OrdersTableName}/index/user"

  OrdersDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: OrdersTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt OrdersRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref OrdersTableName

  GetOrdersResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt OrdersDataSource.Name
      FieldName: getOrders
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "userId = :userId",
            "expressionValues": {
              ":userId": $util.dynamodb.toDynamoDBJson($ctx.identity.sub)
            }
          },
          "limit": ${QueryLimit},
          "index": "user"
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken"
          #end
          "orders": $utils.toJson($ctx.result.items)
        }

  GetOrderResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt OrdersDataSource.Name
      FieldName: getOrder
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.orderId)
          }
        }
      ResponseMappingTemplate: |
        #if( $ctx.identity.sub == $ctx.result.userId )
          $utils.toJson($ctx.result)
        #else
          null
        #end

  ################
  # CREATE ORDER #
  ################
  CreateOrderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CreateOrderFunctionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Ref OrdersCreateOrderArn

  CreateOrderDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: CreateOrder
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt CreateOrderRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Ref OrdersCreateOrderArn

  CreateOrderResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt CreateOrderDataSource.Name
      FieldName: createOrder
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "userId": $utils.toJson($ctx.identity.sub),
            "order": $utils.toJson($ctx.args.order)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  ############
  # PRODUCTS #
  ############
  ProductsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ProductsTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductsTableName}"
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProductsTableName}/index/category"

  ProductsDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: ProductsTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt ProductsRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref ProductsTableName

  GetProductsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt ProductsDataSource.Name
      FieldName: getProducts
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if( $ctx.args.nextToken )
            "nextToken": "$ctx.args.nextToken",
          #end
          "limit": ${QueryLimit}
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken"
          #end
          "products": $utils.toJson($ctx.result.items)
        }
  
  GetProductResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt ProductsDataSource.Name
      FieldName: getProduct
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "productId": $util.dynamodb.toDynamoDBJson($ctx.args.productId)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  GetProductsByCategoryResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt ProductsDataSource.Name
      FieldName: getProductsByCategory
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "category = :category",
            "expressionValues": {
              ":category": $util.dynamodb.toDynamoDBJson($ctx.args.category)
            }
          },
          "limit": ${QueryLimit},
          "index": "category"
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken"
          #end
          "products": $utils.toJson($ctx.result.items)
        }

  #############
  # WAREHOUSE #
  #############
  WarehouseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WarehouseTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WarehouseTableName}"
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WarehouseTableName}"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${WarehouseTableName}/index/orderId-new"

  WarehouseDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt Api.ApiId
      Name: WarehouseTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt WarehouseRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Ref WarehouseTableName

  GetNewPackagingRequestIdsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt WarehouseDataSource.Name
      FieldName: getNewPackagingRequestIds
      TypeName: Query
      RequestMappingTemplate: !Sub |
        {
          "version": "2017-02-28",
          "operation": "Scan",
          #if( $ctx.args.nextToken )
            "nextToken": "$ctx.args.nextToken",
          #end
          "limit": ${QueryLimit},
          "index": "orderId-new"
        }
      ResponseMappingTemplate: |
        {
          #if( $ctx.result.nextToken )
            "nextToken": "$ctx.result.nextToken",
          #end
          "packagingRequestIds": [
            #foreach($item in $ctx.result.items)
              $utils.toJson($item.orderId),
            #end
          ]
        }

  GetPackagingRequestResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt WarehouseDataSource.Name
      FieldName: getPackagingRequest
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Query",
          "query": {
            "expression": "orderId = :orderId",
            "expressionValues": {
              ":orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId)
            }
          }
        }
      ResponseMappingTemplate: |
        ## Could not find the packaging request
        #if( $ctx.result.items.isEmpty() )
          #return($util.error("Packaging request not found."))
        #end

        #set($packagingRequest = {
          "orderId": $ctx.args.input.orderId,
          "products": []
        })
        #foreach($item in $ctx.result.items)
          #if($item.productId == "__metadata")
            $util.qr($packagingRequest.put("status", $item.status))
          #else
            $util.qr($packagingRequest.products.add({
              "productId": $item.productId,
              "quantity": $item.quantity
            }))
          #end
        #end
        $util.toJson($packagingRequest)

  StartPackagingResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt WarehouseDataSource.Name
      FieldName: startPackaging
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId),
            "productId": $util.dynamodb.toDynamoDBJson("__metadata")
          },
          "update": {
            "expression": "SET #status = :status REMOVE #newDate",
            "expressionNames": {
              "#status": "status",
              "#newDate": "newDate"
            },
            "expressionValues": {
              ":status": {"S": "IN_PROGRESS"}
            }
          },
          "condition": {
            "expression": "#oldStatus = :oldStatus",
            "expressionNames": {
              "#oldStatus": "status"
            },
            "expressionValues": {
              ":oldStatus": {"S": "NEW"}
            },
            "conditionalCheckFailedHandler": {
              "strategy": "Reject"
            }
          }
        }
      ResponseMappingTemplate: |
        {
          "success": true
        }

  CompletePackagingResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: Schema
    Properties:
      ApiId: !GetAtt Api.ApiId
      DataSourceName: !GetAtt WarehouseDataSource.Name
      FieldName: completePackaging
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version" : "2018-05-29",
          "operation" : "UpdateItem",
          "key": {
            "orderId": $util.dynamodb.toDynamoDBJson($ctx.args.input.orderId),
            "productId": $util.dynamodb.toDynamoDBJson("__metadata")
          },
          "update": {
            "expression": "SET #status = :status",
            "expressionNames": {
              "#status": "status"
            },
            "expressionValues": {
              ":status": $util.dynamodb.toDynamoDBJson("COMPLETED")
            }
          },
          "condition": {
            "expression": "#oldStatus = :oldStatus",
            "expressionNames": {
              "#oldStatus": "status"
            },
            "expressionValues": {
              ":oldStatus": {"S": "IN_PROGRESS"}
            },
            "conditionalCheckFailedHandler": {
              "strategy": "Reject"
            }
          }
        }
      ResponseMappingTemplate: |
        {
          "success": true
        }