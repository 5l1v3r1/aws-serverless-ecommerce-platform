import datetime
import os
import random
import string
import uuid
import pytest
import requests
import boto3
from helpers import get_parameter # pylint: disable=import-error,no-name-in-module


@pytest.fixture(scope="module")
def warehouse_table_name():
    """
    Warehouse DynamoDB table name
    """

    return get_parameter("/ecommerce/{Environment}/warehouse/table/name")


@pytest.fixture(scope="module")
def user_pool_id():
    """
    Cognito User Pool ID
    """

    return get_parameter("/ecommerce/{Environment}/users/user-pool/id")


@pytest.fixture
def api_id():
    """
    Frontend GraphQL API ID
    """

    return get_parameter("/ecommerce/{Environment}/backoffice-api/api/id")


@pytest.fixture
def api_url():
    """
    Frontend GraphQL API URL
    """

    return get_parameter("/ecommerce/{Environment}/backoffice-api/api/url")


@pytest.fixture(scope="module")
def password():
    """
    Generate a unique password for the user
    """

    return "".join(
        random.choices(string.ascii_uppercase, k=10) +
        random.choices(string.ascii_lowercase, k=10) +
        random.choices(string.digits, k=5) +
        random.choices(string.punctuation, k=3)
    )


@pytest.fixture(scope="module")
def email():
    """
    Generate a unique email address for the user
    """

    return "".join(random.choices(string.ascii_lowercase, k=20))+"@example.local"


@pytest.fixture(scope="module")
def client_id(user_pool_id):
    """
    Return a user pool client
    """

    cognito = boto3.client("cognito-idp")

    # Create a Cognito User Pool Client
    response = cognito.create_user_pool_client(
        UserPoolId=user_pool_id,
        ClientName="ecommerce-{}-frontend-api-test".format(os.environ["ECOM_ENVIRONMENT"]),
        GenerateSecret=False,
        ExplicitAuthFlows=["ADMIN_NO_SRP_AUTH"]
    )

    # Return the client ID
    client_id = response["UserPoolClient"]["ClientId"]
    yield client_id

    # Delete the client
    cognito.delete_user_pool_client(
        UserPoolId=user_pool_id,
        ClientId=client_id
    )


@pytest.fixture(scope="module")
def user_id(user_pool_id, email, password):
    """
    User ID generated by Cognito
    """

    cognito = boto3.client("cognito-idp")

    # Create a Cognito user
    response = cognito.admin_create_user(
        UserPoolId=user_pool_id,
        Username=email,
        UserAttributes=[{
            "Name": "email",
            "Value": email
        }]
    )
    user_id = response["User"]["Username"]
    cognito.admin_set_user_password(
        UserPoolId=user_pool_id,
        Username=user_id,
        Password=password,
        Permanent=True
    )

    cognito.admin_add_user_to_group(
        UserPoolId=user_pool_id,
        Username=user_id,
        GroupName="admin"
    )

    # Return the user ID
    yield user_id

    # Delete the user
    cognito.admin_delete_user(
        UserPoolId=user_pool_id,
        Username=user_id
    )


@pytest.fixture(scope="module")
def jwt_token(user_pool_id, user_id, client_id, email, password):
    """
    Returns a JWT token for API Gateway
    """

    cognito = boto3.client("cognito-idp")

    response = cognito.admin_initiate_auth(
        UserPoolId=user_pool_id,
        ClientId=client_id,
        AuthFlow="ADMIN_NO_SRP_AUTH",
        AuthParameters={
            "USERNAME": email,
            "PASSWORD": password
        }
    )

    return response["AuthenticationResult"]["IdToken"]


def test_get_new_packaging_request_ids(jwt_token, api_url, warehouse_table_name):
    """
    Test getNewPackagingRequestIds
    """

    order_metadata = {
        "orderId": str(uuid.uuid4()),
        "productId": "__metadata",
        "modifiedDate": datetime.datetime.now().isoformat(),
        "newDate": datetime.datetime.now().isoformat()
    }

    print(order_metadata)

    # Seed the database
    table = boto3.resource("dynamodb").Table(warehouse_table_name) # pylint: disable=no-member
    table.put_item(Item=order_metadata)

    # Make requests
    headers = {"Authorization": jwt_token}
    def get_ids(next_token=None):
        if next_token:
            req_data = {
                "query": """
                query ($nextToken: String!) {
                    getNewPackagingRequestIds(nextToken: $nextToken) {
                        nextToken
                        packagingRequestIds
                    }
                }
                """,
                "variables": {
                    "nextToken": next_token
                }
            }
        else:
            req_data = {
                "query": """
                query {
                    getNewPackagingRequestIds {
                        nextToken
                        packagingRequestIds
                    }
                }
                """
            }

        response = requests.post(api_url, json=req_data, headers=headers)
        data = response.json()

        print(jwt_token)
        print(data)

        assert "data" in data
        assert data["data"] is not None
        assert "getNewPackagingRequestIds" in data["data"]
        return data["data"]["getNewPackagingRequestIds"]

    found = False
    ids = get_ids()
    if order_metadata["orderId"] in ids["packagingRequestIds"]:
        found = True
    while found == False and ids.get("nextToken", None) is not None:
        ids = get_ids(ids["nextToken"])
        if order_metadata["orderId"] in ids["packagingRequestIds"]:
            found = True

    assert found == True

    # Clean database
    table.delete_item(Key={
        "orderId": order_metadata["orderId"],
        "productId": order_metadata["productId"]
    })

    