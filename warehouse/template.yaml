AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'


Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name


Globals:
  Function:
    Runtime: python3.8
    Handler: main.handler
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        METADATA_KEY: "__metadata"
        TABLE_NAME: !Ref Table
        POWERTOOLS_SERVICE_NAME: warehouse
        POWERTOOLS_TRACE_DISABLED: "false"
        LOG_LEVEL: !Ref LogLevel


Conditions:
  IsNotProd: !Not [!Equals [!Ref Environment, prod]]


Resources:
  #########
  # TABLE #
  #########

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: productId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: product
          KeySchema:
            - AttributeName: productId
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  OrderEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/order_events/
      Events:
        OrderEvent:
          Type: EventBridgeRule
          Pattern:
            # Capture all orders events
            source: ecommerce.orders
      EventInvokeConfig:
        # Put failed events on a DLQ
        DestinationConfig:
          OnFailure: !GetAtt DeadLetterQueue.Outputs.QueueArn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        # For OnFailure
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: sqs:SendMessage
              Resource: !GetAtt DeadLetterQueue.Outputs.QueueArn

  OrderEventsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${OrderEventsFunction}"
      RetentionInDays: !Ref RetentionInDays

  #####################
  # DEAD LETTER QUEUE #
  #####################
  DeadLetterQueue:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ../../shared/templates/dlq.yaml

  ############
  # LISTENER #
  ############
  Listener:
    Type: AWS::CloudFormation::Stack
    Condition: IsNotProd
    Properties:
      TemplateURL: ../../shared/templates/listener.yaml
      Parameters:
        Environment: !Ref Environment
        EventBusName: !Ref EventBusName
        ServiceName: "warehouse"